name: Project Column Management

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  schedule:
    - cron: '1 0 * * *'  # Runs daily at 00:01 UTC

jobs:
  manage_columns:
    name: Manage project columns
    runs-on: ubuntu-latest

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: sudo apt-get install gh

      - name: Get project node ID by title
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: jcallaghan
          PROJECT_TITLE: "Meal Planner ðŸ“…"  
        run: |
          # Fetch all projects for the user and filter by title
          gh api graphql -f query='
            query($username: String!) {
              user(login: $username) {
                projectsV2(first: 100) {
                  nodes {
                    id
                    title
                  }
                }
              }
            }' -f username=$USERNAME > user_projects.json
          
          # Extract the project node ID for the project titled "Meal Planner ðŸ“…"
          PROJECT_ID=$(jq -r --arg title "$PROJECT_TITLE" '.data.user.projectsV2.nodes[] | select(.title == $title) | .id' user_projects.json)
          
          if [ -z "$PROJECT_ID" ]; then
            echo "Project with title '$PROJECT_TITLE' not found."
            exit 1
          fi

          echo "Project Node ID: $PROJECT_ID"

      - name: Create and remove columns
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the retrieved project ID for managing columns
          PROJECT_ID=$(jq -r --arg title "Meal Planner ðŸ“…" '.data.user.projectsV2.nodes[] | select(.title == $title) | .id' user_projects.json)

          # Fetch existing columns (fields) in the project
          gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 100) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f projectId=$PROJECT_ID > project_fields.json
          
          # Parse the existing columns
          jq -r '.data.node.fields.nodes[] | .name' project_fields.json > existing_columns.txt

          # Define columns to ignore (non-date columns)
          echo -e "No Status\nQueue\nPantry" > ignore_columns.txt

          # Calculate today's date and generate new column names for the next 14 days
          today=$(date +'%a %d-%b %Y')
          for i in {1..14}; do
            column_date=$(date -d "+$i day" +'%a %d-%b %Y')
            echo $column_date >> new_columns.txt
          done

          # Create new columns if they don't already exist
          while IFS= read -r column_date; do
            if ! grep -Fxq "$column_date" existing_columns.txt; then
              echo "Creating new column: $column_date"
              gh api graphql -f query='
                mutation($projectId: ID!, $name: String!) {
                  createProjectV2Field(input: {projectId: $projectId, name: $name}) {
                    projectV2Field {
                      id
                    }
                  }
                }' -f projectId=$PROJECT_ID -f name="$column_date"
            fi
          done < new_columns.txt

          # Remove old date-based columns (older than 5 days)
          today_epoch=$(date +%s)
          cutoff_epoch=$(date -d "-5 days" +%s)

          while IFS= read -r column_name; do
            # Skip non-date columns
            if grep -Fxq "$column_name" ignore_columns.txt; then
              continue
            fi

            # Parse the date and convert to epoch
            column_epoch=$(date -d "$column_name" +%s 2>/dev/null || echo "")

            # Remove column if older than the cutoff
            if [ "$column_epoch" != "" ] && [ $column_epoch -lt $cutoff_epoch ]; then
              echo "Removing old column: $column_name"
              column_id=$(jq -r --arg name "$column_name" '.data.node.fields.nodes[] | select(.name == $name) | .id' project_fields.json)
              gh api graphql -f query='
                mutation($fieldId: ID!) {
                  deleteProjectV2Field(input: {fieldId: $fieldId}) {
                    clientMutationId
                  }
                }' -f fieldId=$column_id
            fi
          done < existing_columns.txt
